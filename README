Embrace Dashboard

The project consists of three docker containers:

backend - Gunicorn serving a Django app, exposing a JSONAPI REST API.
frontend - Nginx serving an Ember app implementing the frontend UI.
db - PostgreSQL/PostGIS, for data persistence.

Adding realtime data to the map is not implemented, but for convenience downloads
added via the frontend form are immediately displayed. Of course this will only
show downloads added from the same client.

This could be removed when a proper realtime map implementation is added. This
could be implemented by pushing any downloads created via the API exposed to the
frontend via a WebSocket to which all frontends can connect. Through the same
WebSocket statistics updates could also be pushed. On this implementation this
could be done using the django-channels addon which implements a scalable event
driven frontend to the Django view layer. Alternatively, polling could be used.

To build the project run:

sh build.sh script

from the project root. The only prerequisites are node 7.x with npm, docker,
docker-compose and docker-machine (you should use Docker for Mac on OS X).

N.B. Due to limitations in building native code for containers on OSX, you need to
have ember-cli installed and build the frontend project before running docker-compose.
The build.sh script takes care of this.

Once docker has finished building, you can start the app with:

docker-compose up

The app should be visible at http://localhost:4200

N.B. There seems to be some kind of race condition with dependencies during
startup despite being configured correctly in docker-compose.yml.

Just run `docker-compose up` a few times if you see database connection errors.

To inspect and run the standalone applications:

embrace_django/

  The backend is a django application. You can run it standalone with:

    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install -r requirements
    $ python manage.py migrate
    $ python manage.py runserver

    But you need to provide your own database (either spatialite or postgis) and
    configure it in embrace/settings.py.


embrace_ember/

  The frontend is an ember application. You can run it standalone with:

  $ npm install
  $ ember s --proxy http://localhost:8000
